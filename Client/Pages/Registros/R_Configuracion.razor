@page "/RConfiguracion";
@page "/RConfiguracion/{ConfiguracionId:int}";
@inject HttpClient httpClient
@inject NotificationService notificationService;
@inject NavigationManager NavigationManager;
<EditForm Model="configuracion" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header d-flex align-items-center">
            <img src="Images/pngwing.com.png" class="img-logo" />
            <h1>Configuraci&oacute;n</h1>
        </div>

        <div class="card-body">
            <div class="row-cols-1">
                <div class="row">
                    <div class="row">
                        <div class="col-md-6">
                            <label>Reorden</label>
                            <input type="checkbox" @bind="configuracion.ReOrden" @onclick="ActualizarReOrden"/>
                        </div>
                    </div>
                </div>

       
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-success">Guardar <i class="oi oi-document" /></button>
        </div>
    </div>

</EditForm>


@code {
    [Parameter]
    public int ConfiguracionId { get; set; }

    public Configuracion configuracion = new Configuracion();

    protected override async Task OnInitializedAsync()
    {
        var configuracion = await httpClient.GetFromJsonAsync<Configuracion>("api/Configuracions/1");

        if (configuracion is not null)
        {
            this.configuracion = configuracion;
        }
    }

    private void ActualizarReOrden()
    {
        // Cambiar el estado de configuracion.ReOrden
        configuracion.ConfiguracionId = 1;
        configuracion.ReOrden = !configuracion.ReOrden;
    }

    public async Task Guardar()
    {

        using var response = await httpClient.PostAsJsonAsync("api/Configuracions", configuracion);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No es posible Guardar",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }

        var configuracionDevuelta = await response.Content.ReadFromJsonAsync<Configuracion>();
        if (configuracionDevuelta is not null)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito",
                    Detail = "Configuracion Guardada Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            configuracion = configuracionDevuelta;
            StateHasChanged();
        }
    }

}
