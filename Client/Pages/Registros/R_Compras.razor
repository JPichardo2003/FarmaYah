@page "/RCompras";
@page "/RCompras/{ComprasId:int}";
@inject HttpClient httpClient
@inject NotificationService notificationService;

<EditForm Model="compras" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
     <div class="card">

        <div class="card-header d-flex align-items-center">
            <img src="Images/pngwing.com.png" class="img-logo" />
            <h1>Registro de Compras</h1>
        </div>
        <div class="card-body">
            @*  COSAS DEL ADMIN
            <div class="row">
            <div class="col-md-6">
            <label>Fecha del Pedido:</label>
            <InputDate @bind-Value="compras.FechaRecibida" class="form-control"></InputDate>
            </div>*@



        </div>

        @*Detalle*@
        <div class="card card-header">
            <div class="col-md-2">
                <h3>Productos</h3>
            </div>

            <div class="card-body border border-1">

                <div class="col-md-2">
                    <label>Filtro:</label>
                    <InputText @bind-Value="Filtro" class="form-control" @onblur="FiltrarProductos" placeholder="Filtrar productos" />
                </div>

                <div class="row form-inline align-items-center mt-3">

                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Productos</label>
                            <div>
                                <InputSelect @bind-Value="d_compra.ProductoId" class="form-select">
                                    <option value="" hidden="hidden">[Seleccione un producto]</option>
                                    @foreach (var p in ListaProductos)
                                    {
                                        <option value="@p.ProductoId">@p.Nombre</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Laboratorio</label>
                            <div>
                                <InputSelect @bind-Value="Laboratorios.LaboratorioId" class="form-select" disabled="@LaboratorioDisabled">
                                    <option value="" hidden="hidden">[Seleccione un laboratorio]</option>
                                    @foreach (var p in ListaLaboratorios)
                                    {
											<option value="@p.LaboratorioId">@p.Nombre</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    </div>

                    <div class="col-1">
                        <div class="from-group">
                            <label>Cantidad</label>
                            <div>
                                <InputNumber min="0" @bind-Value="d_compra.Cantidad" class="form-control" ></InputNumber>
                            </div>
                        </div>
                    </div>

                    @*Boton + Add *@
                    <div class="col-md-4">
                        <div class="form-group">
                            <button type="button" class="btn btn-success" @onclick="AgregarDetalle">+ Add</button>
                        </div>
                    </div>
                </div>
            </div>

            <table class='table table-striped table-hover'>
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Descripci&oacute;n</th>
                        <th>Laboratorio</th>
                        <th>Cantidad Deseada</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                   @foreach(var Detalles in compras.d_Compra){
                    <tr>
						<td>@ObtenerNombreProducto(Detalles.ProductoId)</td>
                        <td>@ObtenerDescripciónProducto(Detalles.ProductoId)</td>
                        <td>@ObtenerNombreLaboratorio(Detalles.ProductoId)</td>
                        <td>@Detalles.Cantidad</td>
						<td><button type="button" class="btn btn-danger oi oi-trash" @onclick=@(() => RemoverDetalle(Detalles))></button></td>
					</tr>
                   }

                    <tr>
                        <td>Total Productos: @compras.d_Compra.Count() </td>
                    </tr>
                </tbody>
            </table>

            <div class="card-footer text-center">
                <div class="row">
                    @if (compras.CompraId > 0 && EntregadoAntes == false)
                    {
                        <div class="text-left">
                            <label>Se ha entregado:</label>
                            <input type="checkbox" @bind="compras.Entregado" class="form-check-input" />
                        </div>
                    }
                </div>
                <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                @if (EntregadoAntes == false)
                {
                    <button type="submit" class="btn btn-success"><i class="oi oi-document" />Guardar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                }
                
            </div>
        </div>

     </div>
</EditForm>

@code
{
    [Parameter]

    public int ComprasId { get; set; }
    public Compras compras { get; set; } = new Compras();
    public d_Compra d_compra { get; set; } = new d_Compra();
    public Laboratorios Laboratorios { get; set; } = new Laboratorios();

    public List<Productos> ListaProductos { get; set; } = new List<Productos>();
    public List<Empleados> ListaEmpleados { get; set; } = new List<Empleados>();
    public List<Sucursales> ListaSucursales { get; set; } = new List<Sucursales>();
    public List<Laboratorios> ListaLaboratorios { get; set; } = new List<Laboratorios>();

    public List<d_Compra> DetallesRemovidos { get; set; } = new List<d_Compra>();
    public List<d_Compra> ListaDetalles { get; set; } = new List<d_Compra>();

    public bool idVacio;
    public bool cantidadCero;
    public bool EntregadoAntes = false;
    bool LaboratorioDisabled => d_compra.ProductoId == 0;



    public string Filtro { get; set; }

    private void ToggleEntregado()
    {
        compras.Entregado = !compras.Entregado;
    }

    protected override async Task OnInitializedAsync()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");
        var empleados = await httpClient.GetFromJsonAsync<List<Empleados>>("api/Empleados");
        var sucursales = await httpClient.GetFromJsonAsync<List<Sucursales>>("api/Sucursales");
        var laboratorios = await httpClient.GetFromJsonAsync<List<Laboratorios>>("api/Laboratorios");

        if (laboratorios is not null)
        {
            ListaLaboratorios = laboratorios;
        }

        if (empleados is not null)
        {
            ListaEmpleados = empleados;
        }
        if (sucursales is not null)
        {
            ListaSucursales = sucursales;
        }
        if (productos is not null)
        {
            ListaProductos = productos;
        }
        if (ComprasId > 0)
        {
            this.compras.CompraId = ComprasId;
            await Buscar();
        }
    }

    public int ObtenerLaboratorioId(int Id)
    {
        return ListaProductos.Where(p => p.ProductoId == Id).FirstOrDefault()!.LaboratorioId!;
    }

    public string ObtenerNombreProducto(int Id)
    {
        return ListaProductos.Where(p => p.ProductoId == Id).FirstOrDefault()!.Nombre!;
    }

    public string ObtenerDescripciónProducto(int Id)
    {
        return ListaProductos.Where(p => p.ProductoId == Id).FirstOrDefault()!.Descripcion!;
    }

    public string ObtenerNombreLaboratorio(int Id)
    {
        var producto = ListaProductos.FirstOrDefault(p => p.ProductoId == Id);

        if (producto != null)
        {
            var laboratorio = ListaLaboratorios.FirstOrDefault(l => l.LaboratorioId == producto.LaboratorioId);

            if (laboratorio != null)
            {
                return laboratorio.Nombre!;
            }
        }

        return "Lab Not Found";
    }

    public async Task? FiltrarProductos()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");
        if(string.IsNullOrEmpty(Filtro))
        {
            ListaProductos = productos;
            return;
        }
        productos = productos?.Where(p => p.Nombre.ToLower().Contains(Filtro.ToLower())).ToList();
        ListaProductos = productos;
    }

    public async Task Buscar()
    {
        Nuevo();
        try
        {
            await httpClient.GetFromJsonAsync<Compras>($"api/Compras/{ComprasId}");
        }
        catch (Exception ex)
        {
            var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "No se pudo encontrar la factura",
                Duration = 4_000
            };
            notificationService.Notify(mensaje);
            Nuevo();
            return;
        }
        var CompraEncontrada = await httpClient.GetFromJsonAsync<Compras>($"api/Compras/{ComprasId}");
        if (CompraEncontrada != null)
        {
            this.compras = CompraEncontrada;
            ComprasId = compras.CompraId;
            EntregadoAntes = compras.Entregado;
            StateHasChanged();
        }
    }

    public async Task Guardar()
    {
        if (!ValidarGuardar())
        {
            return;
        }
        // Si es ya fue entregado la fecha recibida es guardada
        if (EntregadoAntes == false && compras.Entregado == true)
        {
            compras.FechaRecibida = DateTime.Now;

        }
        using var response = await httpClient.PostAsJsonAsync("api/Compras", compras);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = response.RequestMessage + "No se pudo Guardar correctamente, verifique los campos",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        if (DetallesRemovidos.Count > 0)
        {
            foreach (var detalle in DetallesRemovidos)
            {
                await httpClient.DeleteAsync($"api/Compras/DeleteDetalles/{detalle.CompraId}");
            }
        }
        var compraDevuelta = await response.Content.ReadFromJsonAsync<Compras>();
        if (compraDevuelta is not null)
        {

            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "Factura Guardada Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            if (EntregadoAntes == false && compras.Entregado == true)
            {

                //cuando se entrego ya se agregan los productos
                if (compras.d_Compra.Count > 0)
                {
                    foreach (var detalle in compras.d_Compra)
                    {
                        var reducir = ListaProductos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
                        reducir!.Existencia = reducir.Existencia + detalle.Cantidad;
                        using var responseDetalleAgregado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{reducir.ProductoId}", reducir);
                    }
                }
            }
            StateHasChanged();
            this.Nuevo();
        }
    }

    private bool ValidarGuardar()
    {
        if (compras.d_Compra.Count <= 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debe agregar al menos un detalle a la compra",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        return true;
    }

    public void Nuevo()
    {
        this.compras = new Compras();
        this.d_compra = new d_Compra();
        DetallesRemovidos = new List<d_Compra>();
        ListaDetalles = new List<d_Compra>();
    }


    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Compras/{compras.CompraId}");
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "La factura no fue Eliminada Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "Factura Eliminada Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
        this.Nuevo();
    }

    public bool ValidarDetalle()
    {
        return true;
    }

    public async Task AgregarDetalle()
    {
        if (!ValidarDetalle())
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Llene los campos del detalle Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        if (ListaDetalles.Any(d => d.ProductoId == d_compra.ProductoId))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El producto ya fue agregado",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        d_compra.LaboratorioId = Laboratorios.LaboratorioId;

        compras.d_Compra.Add(d_compra);
        ListaDetalles.Add(d_compra);
        d_compra = new d_Compra();
        Laboratorios.LaboratorioId = 0;
        StateHasChanged();
    }

    private async Task<Productos> BuscarProductos(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        return producto ?? new Productos();
    }

    public void RemoverDetalle(d_Compra detalle)
    {
        d_compra = detalle;
        compras.d_Compra.Remove(detalle);
        DetallesRemovidos.Add(detalle);
        if (ListaDetalles.Any(d => d.d_CompraId == detalle.CompraId))
            ListaDetalles.Remove(detalle);
        Laboratorios.LaboratorioId = detalle.LaboratorioId;
        StateHasChanged();
    }
   
}
