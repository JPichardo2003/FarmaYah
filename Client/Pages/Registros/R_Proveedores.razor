@page "/RProveedor";
@page "/RProveedor/{ProveedorId:int}";
@inject HttpClient httpClient
@inject NotificationService notificationService;
@inject NavigationManager navigationManager;

<EditForm Model="proveedor" OnValidSubmit="Guardar" >
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <div class="col">
                <button @onclick="Back"><i class="bi bi-arrow-left-circle"></i></button>
            </div>
            <div class="col d-flex align-items-center justify-content-center">
                <img src="Images/pngwing.com.png" class="img-logo" />
                <h1>Registro de Proveedores</h1>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <label>Proveedor ID:</label>
                <div class="input-group col-md-6">
                    <InputNumber @bind-Value="proveedor.ProveedorId" class="id-input"></InputNumber>
                    <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                </div>
                <div class="col">
                    <label>Nombre:</label>
                    <InputText @bind-Value="proveedor.Nombre" class="form-control"></InputText>
                    <ValidationMessage For="@(() => proveedor.Nombre)" />
                </div>
                <div class="col-md-6">
                    <label>RNC:</label>
                    <InputText @bind-Value="proveedor.RNC" class="form-control"></InputText>
                    <ValidationMessage For="@(() => proveedor.RNC)" />
                </div>
                <div class="col-md-6">
                    <label>Telefono:</label>
                    <InputText @bind-Value="proveedor.Telefono" class="form-control"></InputText>
                    <ValidationMessage For="@(() => proveedor.Telefono)" />
                </div>
                <div class="col-md-6">
                    <label>Email:</label>
                    <InputText @bind-Value="proveedor.Email" class="form-control"></InputText>
                    <ValidationMessage For="@(() => proveedor.Email)" />
                </div>
                <div class="col-md-6">
                    <label>Direcci&oacute;n:</label>
                    <InputText @bind-Value="proveedor.Direccion" class="form-control"></InputText>
                    <ValidationMessage For="@(() => proveedor.Direccion)" />
                </div>
                <div class="col-md-6">
                    <label>Tipo de contribuyentes</label>
                    <InputSelect  @bind-Value="proveedor.TipoContribuyente" class="form-select">
                        <option disabled selected>Seleccione...</option>
                        <option value="Persona Fisica">Persona Fisica</option>
                        <option value="Persona Juridica">Persona Juridico</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => proveedor.TipoContribuyente)" />
                </div>
                <div class="col-md-6">
                    <label>Categoria comercial:</label>
                    <InputSelect @bind-Value="proveedor.Categoria" class="form-select">
                        <option disabled selected>Seleccione...</option>
                        <option value="Nacional">Nacional</option>
                        <option value="Internacional">Internacional</option>
                      </InputSelect>
                    <ValidationMessage For="@(() => proveedor.Categoria)" />
                </div>
                
            </div>
            <div class="row">
                <div class="col">
                    <label>Nota:</label>
                    <InputTextArea @bind-Value="proveedor.Nota" class="form-control"></InputTextArea>
                    <ValidationMessage For="@(() => proveedor.Nota)" />
                </div>
            </div>
            <br />

            @*Detalles:*@
            <div class="card card-header">
                <h3>Productos</h3>
            </div>
            <div class="card-body border border-1">
                <div class="row">
                    <div class="col-md-6">
                        <label>Producto</label>
                        <InputSelect @bind-Value="Detalles.ProductoId" class="form-select">
                            <option value="" hidden="hidden">Seleccione</option>
                            @foreach (var p in ListaProductos)
                            {
                                <option value="@p.ProductoId">@p.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Detalles.ProductoId)" />
                    </div>
                    <div class="col-md-6">
                        <label>Cantidad</label>
                        <div class="input-group">
                          
                            <button type="button" class="btn btn-success" @onclick="AgregarDetalle"><i class="oi oi-plus" />Add</button>
                        </div>
                    </div>
                </div>
            </div>
            <div>

            </div>
                <div class="card">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Laboratorio</th>
                            <th>Unidad</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var producto in proveedor.ProveedorProducto)
                        {
                            <tr>
                                <td>@NombreProducto(producto.ProductoId)</td>
                                <td>@DescripcionProducto(producto.ProductoId)</td>
                                <td>@NombreLaboratorio(producto.ProductoId)</td>
                                <td>@NombreUnidad(producto.ProductoId)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <br />
            <div class="row justify-content-center">
                <div class="col-4">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
                    <button type="submit" class="btn btn-outline-success"> <i class="oi oi-document" /> Guardar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="io io-trash" /> Eliminar</button>
                    
                </div>
            </div>
        </div>
    </div>
</EditForm>
@code{
    [Parameter]
    public int ProveedorId { get; set; } = 0;
    public Proveedores proveedor { get; set; } = new Proveedores();
    public ProveedorProducto Detalles { get; set; } = new ProveedorProducto();
    public List<Productos> ListaProductos { get; set; } = new List<Productos>();
    public List<ProveedorProducto> ListaDetalles { get; set; } = new List<ProveedorProducto>();
    public List<ProveedorProducto> DetallesRemovidos { get; set; } = new List<ProveedorProducto>();
    public bool idVacio { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ProveedorId > 0)
        {
            proveedor = await httpClient.GetFromJsonAsync<Proveedores>($"api/Proveedores/{ProveedorId}") ?? new Proveedores();
        }
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos")?? new List<Productos>(ListaProductos);
        if (productos != null)
        {
            ListaProductos = productos;
        }

    }

    public void Back()
    {
        navigationManager.NavigateTo("MenuProveedores");
    }

    public async void Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Proveedores", proveedor);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Error al guardar el proveedor",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var proveedorDevuelto = await response.Content.ReadFromJsonAsync<Proveedores>();
        if (proveedorDevuelto is not null)
        {
            proveedor = proveedorDevuelto;
            Nuevo();
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado",
                    Detail = "proveedor guardado con éxito",
                    Duration = 5000
                };
        }
    }
    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Proveedores/{proveedor.ProveedorId}");
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Error al eliminar el proveedor",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Eliminado",
                    Detail = "Proveedor eliminado con éxito",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
            Nuevo();
        }

    }
    public void Nuevo()
    {
        ListaDetalles = new List<ProveedorProducto>();
        proveedor = new Proveedores();
        ProveedorId = 0;
        StateHasChanged();


    }
    public bool Validar()
    {
        idVacio = (Detalles.ProductoId <= 0);

        return idVacio;
    }
    public async Task AgregarDetalle()
    {
        if (Validar())
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debes elegir un producto",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var producto = await BuscarProductos(Detalles.ProductoId);
        if (producto == null)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"El producto no existe",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;           

        }


        if (proveedor != null)
        {
            var detalleEncontrado = await httpClient.GetFromJsonAsync<List<ProveedorProducto>>($"api/Proveedores");
            //aqui cuando se modifica una cantidad utilizada de un producto si es el mismo que ya estaba no se vuelve a descontar de la BD
            var detalleExiste = detalleEncontrado!.Any(d => d.ProveedorProductoId == Detalles.ProveedorProductoId);

            Detalles.ProveedorId = proveedor.ProveedorId;
            
            proveedor.ProveedorProducto.Add(Detalles);
            if (detalleExiste)
            {
                ListaDetalles.Add(Detalles);

            }
            if (DetallesRemovidos.Any(d => d.ProveedorProductoId == Detalles.ProveedorProductoId))
                DetallesRemovidos.Remove(Detalles);
            Detalles = new ProveedorProducto();

        }
        StateHasChanged();
    }

    private async Task<Productos> BuscarProductos(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        return producto ?? new Productos();
    }

    public async Task Buscar()
    {
        var proveedorNotNull = (await httpClient.GetFromJsonAsync<List<Proveedores>>($"api/Proveedores")).ToList().Any(p => p.ProveedorId == proveedor.ProveedorId);
        if (proveedorNotNull)
        {
            var proveedorEncontrado = await httpClient.GetFromJsonAsync<Proveedores>($"api/Proveedores/{proveedor.ProveedorId}");
            if (proveedorEncontrado is not null)
            {
                proveedor = proveedorEncontrado;
            }
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "proveedor no encontrado",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
        }
    }

    public string NombreProducto(int id)
    {
        var unidad = ListaProductos.FirstOrDefault(u => u.ProductoId == id);
        return unidad?.Nombre ?? "";
    }
    public string NombreLaboratorio(int id)
    {
        var productos = ListaProductos.FirstOrDefault(u => u.ProductoId == id);
        return productos?.Nombre ?? "";
    }
    public string DescripcionProducto(int id)
    {
        var productos = ListaProductos.FirstOrDefault(u => u.ProductoId == id);
        return productos?.Descripcion ?? "";
    }
    public string LaboratorioProducto(int id)
    {
        var productos = ListaProductos.FirstOrDefault(u => u.ProductoId == id);
        var laboratorio = ListaProductos.FirstOrDefault(u => u.LaboratorioId == productos.LaboratorioId);
        return laboratorio?.Nombre ?? "";
    }
    public string NombreUnidad(int id)
    {
        var unidad = ListaProductos.FirstOrDefault(u => u.ProductoId == id);
        return unidad?.Nombre ?? "";
    }

}