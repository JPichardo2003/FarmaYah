@page "/CFacturas"
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
<PageTitle>Consulta Facturación</PageTitle>
<div class="card">
    <div class="card-header d-flex align-items-center">
        <button @onclick="VolverAtras"><i class="bi bi-arrow-left-circle"></i></button>
        <img src="Images/pngwing.com.png" class="img-logo" />
        <h1>Consultas de Facturas</h1>
    </div>
    <div class="card-body">
        <div class="input-group-text">
            <label class="form-control-label col-1">Desde:</label>
            <div class="col-md-3">
                <input class="form-control" type="date" @bind="Desde" />
            </div>
            <label class="form-control-label col-1">Hasta:</label>
            <div class="col-md-3">
                <input class="form-control" type="date" @bind="Hasta" />
            </div>
            <button type="button" @onclick="Buscar" class="btn btn-outline-primary">
                <i class="bi bi-search" />
            </button>
        </div>
    </div>
    <label>Filtrar Por:</label>
    <div>
        <div class="col-md-6 filter-input">
            <InputSelect @bind-Value="Filtro" class="form-select">
                <option value="1">Seguro Medico</option>
                <option value="2">Empleado</option>
                <option value="3">Sucursal</option>
                <option value="4">Estado</option>
                <option value="5">Montos a partir de</option>
            </InputSelect>
        </div>
        <div class="col-md-6">
            @switch (Filtro)
            {
                case 1:
                    <InputNumber @bind-Value="facturas!.SeguroMedicoId" class="form-control"></InputNumber>
                    break;
                case 2:
                    <InputNumber @bind-Value="facturas!.EmpleadoId" class="form-control"></InputNumber>
                    break;
                case 3:
                    <InputNumber @bind-Value="facturas!.SucursalId" class="form-control"></InputNumber>
                    break;
                case 4:
                    <InputText @bind-Value="facturas!.Estado" class="form-control"></InputText>
                    break;
                case 5:
                    <InputNumber @bind-Value="facturas!.MontoTotal" class="form-control"></InputNumber>
                    break;
            }
        </div>
    </div>

    @if (ListaFacturas is not null)
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Fecha</th>
                        <th>Seguro Medico</th>
                        <th>Atendido Por</th>
                        <th>Sucursal</th>
                        <th>Estado</th>
                        <th>Monto</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var facturas in ListaFacturas)
                    {
                        <tr>
                            <td>@facturas.Fecha.ToString("MM/dd/yyyy")</td>
                            <td>@ObtenerNombreSeguro(facturas.SeguroMedicoId)</td>
                            <td>@ObtenerNombre(facturas.EmpleadoId)</td>
                            <td>@ObtenerNombreSucursal(facturas.SucursalId)</td>
                            <td>@facturas.Estado</td>
                            <td>@facturas.MontoTotal</td>
                            <td><a href="RFacturas/@facturas.FacturaId"><i class="bi bi-eye-fill"></i></a></td>
                        </tr>
                    }
                    <tr>
                        <td>Conteo: @Conteo</td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>Total: @TotalPesos $</td>
                    </tr>
                </tbody>
            </table>
        </div>
    }
</div>


@code {

    public int Filtro { get; set; }
    public List<Facturas>? ListaFacturas { get; set; }
    public Facturas? facturas { get; set; } = new Facturas();
    public List<Empleados> ListaEmpleados { get; set; } = new List<Empleados>();
    public List<SegurosMedicos> ListaSeguros { get; set; } = new List<SegurosMedicos>();
    public List<Sucursales> ListaSucursales { get; set; } = new List<Sucursales>();

    public int Conteo { get; set; }
    public float TotalPesos { get; set; }

    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var empleados = await httpClient.GetFromJsonAsync<List<Empleados>>("api/Empleados");
        var seguros = await httpClient.GetFromJsonAsync<List<SegurosMedicos>>("api/SegurosMedicos");
        var sucursales = await httpClient.GetFromJsonAsync<List<Sucursales>>("api/Sucursales");

        if (seguros is not null)
        {
            ListaSeguros = seguros;
        }
        if (sucursales is not null)
        {
            ListaSucursales = sucursales;
        }
        if (empleados is not null)
        {
            ListaEmpleados = empleados;
        }
        await Buscar();
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
    }

    public async Task Buscar()
    {
        if (Filtro == 1 && facturas!.SeguroMedicoId > 0)
        {
            ListaFacturas = (await httpClient.GetFromJsonAsync<List<Facturas>>($"api/Facturas"))!.Where(t => t.SeguroMedicoId == facturas!.SeguroMedicoId && t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
            StateHasChanged();
        }
        else
        if (Filtro == 2 && facturas!.EmpleadoId > 0)
        {
            ListaFacturas = (await httpClient.GetFromJsonAsync<List<Facturas>>($"api/Facturas"))!.Where(t => t.EmpleadoId == facturas!.EmpleadoId && t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
            StateHasChanged();
        }
        else
        if (Filtro == 3 && facturas!.SucursalId > 0)
        {
            ListaFacturas = (await httpClient.GetFromJsonAsync<List<Facturas>>($"api/Facturas"))!.Where(t => t.SucursalId == facturas.SucursalId && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
            StateHasChanged();
        }
        else
        if (Filtro == 4 && !string.IsNullOrEmpty(facturas!.Estado))
        {
            var estadoBusqueda = facturas!.Estado.ToLower();
            ListaFacturas = (await httpClient.GetFromJsonAsync<List<Facturas>>($"api/Facturas"))!
                .Where(t => t.Estado != null && t.Estado.ToLower().Contains(estadoBusqueda) && t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date)
                .ToList();
            StateHasChanged();
        }
        else
        if (Filtro == 5 && facturas!.MontoTotal > 0)
        {
            ListaFacturas = (await httpClient.GetFromJsonAsync<List<Facturas>>($"api/Facturas"))!.Where(t => t.MontoTotal == facturas!.MontoTotal && t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
            StateHasChanged();
        }
        else
        {
            ListaFacturas = await httpClient.GetFromJsonAsync<List<Facturas>>($"api/Facturas");
            StateHasChanged();
        }
        Conteo = ListaFacturas != null ? ListaFacturas!.Count() : 0;
        TotalPesos = ListaFacturas != null ? ListaFacturas!.Sum(f => f.MontoTotal) : 0;
    }

    public string ObtenerNombre(int Id)
    {
        var empleado = ListaEmpleados.FirstOrDefault(p => p.EmpleadoId == Id);
        return empleado?.Nombre ?? "Nombre no encontrado";
    }

    public string ObtenerNombreSucursal(int Id)
    {
        var sucursal = ListaSucursales.FirstOrDefault(p => p.SucursalId == Id);
        return sucursal?.Nombre ?? "Nombre no encontrado";
    }

    public string ObtenerNombreSeguro(int? Id)
    {
        var seguro = ListaSeguros.FirstOrDefault(p => p.SeguroMedicoId == Id);
        return seguro?.Nombre ?? "NULL";
    }

    private void VolverAtras()
    {
        NavigationManager.NavigateTo("/MenuFacturas");
    }
}