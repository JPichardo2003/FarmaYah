@page "/C_Empleados"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
<div class="card">
    <div class="card-header d-flex align-items-center">
        <button @onclick="VolverAtras"><i class="bi bi-arrow-left-circle"></i></button>
        <img src="Images/pngwing.com.png" class="img-logo" />
        <h1>Consultas de Empleados</h1>
    </div>
    <label>Filtro:</label>
    <div class="col-md-6 filter-input">
        <InputSelect @bind-Value="Filtro" class="form-select">
            <option value="1">Nombre</option>
            <option value="2">Direcci&oacute;n</option>
            <option value="3">Sucursal</option>
            <option value="4">Tel&eacute;fono</option>
        </InputSelect>
    </div>
    <div class="row">
        <div class="col-md-6">
            @switch (Filtro)
            {
                case 1:
                    <InputText @bind-Value="empleados!.Nombre" class="form-control"></InputText>
                    break;
                case 2:
                    <InputText @bind-Value="empleados!.Direccion" class="form-control"></InputText>
                    break;
                case 3:
                    <InputText @bind-Value="SucursalName" class="form-control"></InputText>
                    break;
                case 4:
                    <InputText @bind-Value="empleados!.Telefono" class="form-control"></InputText>
                    break;
            }
        </div>
        <div class="col-md-4">
            <button type="button" @onclick="Buscar" class="btn btn-outline-primary">
                <i class="bi bi-search" />
            </button>
        </div>
    </div>
    

    @if (ListaEmpleados is not null)
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Direcci&oacute;n</th>
                        <th>Sucursal</th>
                        <th>Tel&eacute;fono</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var empleado in ListaEmpleados)
                    {
                        <tr>
                            <td>@empleado.Nombre</td>
                            <td>@empleado.Direccion</td>
                            <td>@ObtenerNombreSucursal(empleado.SucursalId)</td>
                            <td>@empleado.Telefono</td>
                            <td><a href="REmpleados/@empleado.EmpleadoId"><i class="bi bi-eye-fill"></i></a></td>
                        </tr>
                    }
                    <tr>
                        <td>Conteo: @Conteo</td>
                    </tr>
                </tbody>
            </table>
        </div>
    }
</div>


@code {

    public int Filtro { get; set; }
    public List<Empleados>? ListaEmpleados { get; set; }
    public List<Sucursales>? ListaSucursales { get; set; }
    public Empleados? empleados { get; set; } = new Empleados();

    public int Conteo { get; set; }
    public string? SucursalName { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var empleados = await httpClient.GetFromJsonAsync<List<Empleados>>("api/Empleados");
        var sucursales = await httpClient.GetFromJsonAsync<List<Sucursales>>("api/Sucursales");
        if (empleados is not null)
        {
            ListaEmpleados = empleados;
        }
        if (sucursales is not null)
        {
            ListaSucursales = sucursales;
        }
        await Buscar();
    }

    public async Task Buscar()
    {
        if (Filtro == 1 && !string.IsNullOrEmpty(empleados!.Nombre))
        {
            var nombreBusqueda = empleados!.Nombre.ToLower();
            ListaEmpleados = (await httpClient.GetFromJsonAsync<List<Empleados>>($"api/Empleados"))!
                .Where(t => t.Nombre != null && t.Nombre.ToLower().Contains(nombreBusqueda))
                .ToList();
            StateHasChanged();
        }
        else
        if(Filtro == 2 && !string.IsNullOrEmpty(empleados!.Direccion))
        {
            var direccionBusqueda = empleados!.Direccion.ToLower();
            ListaEmpleados = (await httpClient.GetFromJsonAsync<List<Empleados>>($"api/Empleados"))!
                .Where(t => t.Direccion != null && t.Direccion.ToLower().Contains(direccionBusqueda))
                .ToList();
            StateHasChanged();
        }
        else
        if (Filtro == 3 && !string.IsNullOrEmpty(SucursalName))
        {
            var sucursalBusqueda = SucursalName.ToLower();
            ListaEmpleados = (await httpClient.GetFromJsonAsync<List<Empleados>>($"api/Empleados"))!
                .Where(s => ListaSucursales!.Any(empleadoactual => empleadoactual.SucursalId == s.SucursalId && s.Nombre!.ToLower().Contains(sucursalBusqueda)))
                .ToList();
            StateHasChanged();
        }else
        if(Filtro == 4 && !string.IsNullOrEmpty(empleados!.Telefono))
        {
            
            ListaEmpleados = (await httpClient.GetFromJsonAsync<List<Empleados>>($"api/Empleados"))!
            .Where(t => t.Telefono == empleados!.Telefono).ToList();
            StateHasChanged();
        }
        else
        {
            ListaEmpleados = (await httpClient.GetFromJsonAsync<List<Empleados>>($"api/Empleados"));
            StateHasChanged();
        }
        Conteo = ListaEmpleados != null ? ListaEmpleados!.Count() : 0;

    }

    private void VolverAtras()
    {
        NavigationManager.NavigateTo("/MenuEmpleados");
    }

    public string ObtenerNombreSucursal(int id)
    {
        var sucursal = ListaSucursales!.FirstOrDefault(s => s.SucursalId == id);
        return sucursal!.Nombre ?? "";
    }
}
