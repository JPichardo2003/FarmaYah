@page "/c_productos"
@page "/c_productos/{ProductoId:int}"
@inject HttpClient HttpClient
@inject NavigationManager navigationManager
<div class="card">
	<div class="card-header ">
		<div class="col">
			<button @onclick="Back"><i class="bi bi-arrow-left-circle"></i></button>
		</div>
		<div class="col d-flex align-items-center justify-content-center">
			<img src="Images/pngwing.com.png" class="img-logo" />
			<h1>Consulta Producto</h1>
		</div>
	</div>
	<div class="card-header d-flex align-items-center">
	</div>

	<div class="card-body">
		<div class="row">
			@* <div class="col-3">
				<label for="id">Buscar por ID:</label>
				<input type="number" id="id" @bind="filtroId" class="form-control" />
			</div> *@
			<div class="col-3">
				<label for="nombre">Buscar por nombre:</label>
				<input type="text" id="nombre" @bind="filtroNombre" class="form-control" />
			</div>
			<div class="col-3">
				<label for="precioMin">Precio Mínimo:</label>
				<input type="number" id="precioMin" @bind="filtroPrecioMin" class="form-control" />
			</div>
			<div class="col-3">
				<label>Unidad:</label>
				<InputSelect class="form-select" @bind-Value="filtroUnidad">
					<option value="0" disabled selected>Elija una opci&oacute;n</option>
					@foreach (var unidad in Unidades?? new List<Unidad>())
					{
						<option value="@unidad.UnidadId">@unidad.Descripcion</option>
					}
				</InputSelect>
			</div>
			<div class="col-3">
				<label for="precioMax">Precio Máximo:</label>
				<div class="input-group">
					<input type="number" id="precioMax" @bind="filtroPrecioMax" class="form-control" />
					<button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
						<i class="oi oi-magnifying-glass" />
					</button>
					<button @onclick="VaciarInputs" class="btn btn-outline-secondary" type="button" id="buscarButton">
						<i class="oi oi-trash" />
					</button>
				</div>
			</div>
		</div>

		@if (productos != null && productos.Any())
		{
			<table class="table">
				<thead>
					<tr>
						@* <th>Producto ID</th> *@
						<th>Nombre</th>
						<th>Descripción</th>
						<th>Laboratorio </th>
						<th>Precio</th>
						<th>Existencia</th>
						<th>Unidad</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var producto in productosFiltrados)
					{
						<tr>
							@* <td>@producto.ProductoId</td> *@
							<td>@producto.Nombre</td>
							<td>@producto.Descripcion</td>
							<td>@NombreLaboratorio(producto.LaboratorioId)</td>
							<td>@producto.Precio</td>
							<td>@producto.Existencia</td>
							<td>@NombreUnidad(producto.UnidadId)</td>
                            <td><button class="btn btn-outline-info"><a href="RProducto/@producto.ProductoId">Editar</a></button></td>
						</tr>
					}
				</tbody>
			</table>
		}
		else
		{
			<p>Cargando...</p>
		}
	</div>
</div>

@code {
	[Parameter]	
	public int ProductoId { get; set; }
	List<Productos>? productos { get; set; }
	List<Productos>? productosFiltrados { get; set; }
	List<Unidad>? Unidades { get; set; }
	List<Laboratorios>? Laboratorios {get; set;}
	public int? filtroId;
	public string filtroNombre = "";
	public float? filtroPrecioMin;
	public float? filtroPrecioMax;
	public int filtroUnidad;
	protected override async Task OnInitializedAsync()
	{
		productos ??= await HttpClient.GetFromJsonAsync<List<Productos>>("api/Productos") ?? new List<Productos>();
		productosFiltrados = productos;
		Unidades = await HttpClient.GetFromJsonAsync<List<Unidad>>("api/Unidades")?? new List<Unidad>();
		Laboratorios = await HttpClient.GetFromJsonAsync<List<Laboratorios>>("api/Laboratorios")?? new List<Laboratorios>();
		if(ProductoId > 0)
        {
            productosFiltrados = productos.Where(p => p.ProductoId == ProductoId).ToList();
        }
	}
	public void Back()
    {
        navigationManager.NavigateTo("MenuProductos");
    }
	public string? NombreUnidad(int id)
	{
        var unidad = Unidades?.FirstOrDefault(u => u.UnidadId == id);
        return unidad?.Descripcion ?? "";
    }
	public string? NombreLaboratorio(int id)
    {
        var laboratorio = Laboratorios?.FirstOrDefault(u => u.LaboratorioId == id);
        return laboratorio?.Nombre ?? "";
    }

	public async Task Buscar()
	{
		productos = await HttpClient.GetFromJsonAsync<List<Productos>>("api/Productos") ?? new List<Productos>();

		productosFiltrados = productos
			.Where(p => (string.IsNullOrEmpty(filtroNombre) || p.Nombre.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
						&& (!filtroPrecioMin.HasValue || p.Precio >= filtroPrecioMin)
						&& (!filtroPrecioMax.HasValue || p.Precio <= filtroPrecioMax)
						&& (filtroUnidad == 0 || p.UnidadId == filtroUnidad))
			.ToList();
	}

	public void VaciarInputs()
	{
		filtroNombre = "";
		filtroPrecioMin = null;
		filtroPrecioMax = null;
		filtroUnidad = 0;
		productosFiltrados = productos;
	}
}
