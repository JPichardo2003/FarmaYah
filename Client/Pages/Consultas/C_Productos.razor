@page "/c_productos"
@inject HttpClient HttpClient
@inject NavigationManager navigationManager
<div class="card">
	<div class="card-header ">
		<div class="col">
			<button @onclick="Back"><i class="bi bi-arrow-left-circle"></i></button>
		</div>
		<div class="col d-flex align-items-center justify-content-center">
			<img src="Images/pngwing.com.png" class="img-logo" />
			<h1>Consulta Producto</h1>
		</div>
	</div>
	<div class="card-header d-flex align-items-center">
	</div>

	<div class="card-body">
		<div class="row">
			<div class="col-3">
				<label for="id">Buscar por ID:</label>
				<input type="number" id="id" @bind="filtroId" class="form-control" />
			</div>
			<div class="col-3">
				<label for="nombre">Buscar por nombre:</label>
				<input type="text" id="nombre" @bind="filtroNombre" class="form-control" />
			</div>
			<div class="col-3">
				<label for="precioMin">Precio Mínimo:</label>
				<input type="number" id="precioMin" @bind="filtroPrecioMin" class="form-control" />
			</div>
			<div class="col-3">
				<label for="precioMax">Precio Máximo:</label>
				<div class="input-group">
					<input type="number" id="precioMax" @bind="filtroPrecioMax" class="form-control" />
					<button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
						<i class="oi oi-magnifying-glass" />
					</button>
					<button @onclick="VaciarInputs" class="btn btn-outline-secondary" type="button" id="buscarButton">
						<i class="oi oi-trash" />
					</button>
				</div>
			</div>
		</div>

		@if (productos != null && productos.Any())
		{
			<table class="table">
				<thead>
					<tr>
						<th>Producto ID</th>
						<th>Nombre</th>
						<th>Descripción</th>
						<th>Laboratorio</th>
						<th>Precio</th>
						<th>Existencia</th>
						<th>Unidad</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var producto in productosFiltrados)
					{
						<tr>
							<td>@producto.ProductoId</td>
							<td>@producto.Nombre</td>
							<td>@producto.Descripcion</td>
							<td>@ObtenerNombreLaboratorio(producto.ProductoId)</td>
							<td>@producto.Precio</td>
							<td>@producto.Existencia</td>
							<td>@NombreUnidad(producto.UnidadId)</td>
                            <td><button class="btn btn-outline-info"><a href="RProducto/@producto.ProductoId">Editar</a></button></td>
						</tr>
					}
				</tbody>
			</table>
		}
		else
		{
			<p>Cargando...</p>
		}
	</div>
</div>

@code {
	public List<Productos> productos = new List<Productos>();
	public List<Productos> productosFiltrados = new List<Productos>();
	public List<Laboratorios> ListaLaboratorios { get; set; } = new List<Laboratorios>();

	public List<Unidad> Unidades = new List<Unidad>();
	public int? filtroId;
	public string filtroNombre = "";
	public float? filtroPrecioMin;
	public float? filtroPrecioMax;

	protected override async Task OnInitializedAsync()
	{

		productos = await HttpClient.GetFromJsonAsync<List<Productos>>("api/Productos")?? new List<Productos>();
		productosFiltrados = productos;
		Unidades = await HttpClient.GetFromJsonAsync<List<Unidad>>("api/Unidades")?? new List<Unidad>();
		var laboratorios = await HttpClient.GetFromJsonAsync<List<Laboratorios>>("api/Laboratorios")?? new List<Laboratorios>();
		if (laboratorios is not null)
		{
			ListaLaboratorios = laboratorios;
		}
	}
	public void Back()
    {
        navigationManager.NavigateTo("MenuProductos");
    }
	public string NombreUnidad(int id)
	{
        var unidad = Unidades.FirstOrDefault(u => u.UnidadId == id);
        return unidad?.Descripcion ?? "";
    }
	public string ObtenerNombreLaboratorio(int Id)
	{
		var producto = productos.FirstOrDefault(p => p.ProductoId == Id);

		if (producto != null)
		{
			var laboratorio = ListaLaboratorios.FirstOrDefault(l => l.LaboratorioId == producto.LaboratorioId);

			if (laboratorio != null)
			{
				return laboratorio.Nombre!;
			}
		}

		return "Lab Not Found";
	}

	public void Buscar()
	{
		productosFiltrados = productos
			.Where(p => (!filtroId.HasValue || p.ProductoId == filtroId) &&
						(string.IsNullOrEmpty(filtroNombre) || p.Nombre.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
						&& (!filtroPrecioMin.HasValue || p.Precio >= filtroPrecioMin)
						&& (!filtroPrecioMax.HasValue || p.Precio <= filtroPrecioMax))
			.ToList();
	}

	public void VaciarInputs()
	{
		filtroId = null;
		filtroNombre = "";
		filtroPrecioMin = null;
		filtroPrecioMax = null;
		productosFiltrados = productos;
	}
}
